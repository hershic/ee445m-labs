#+todo: TODO(t) VERIFY(v) IN-PROGRESS(p) | OPTIONAL(o) HIATUS(h) DONE(d) DISCARDED(c) HACKED(k)
* 2015.03.31
** investigations
*** Graph
**** OPTIONAL Sometimes the plot doesn't clear on changing of modes
*** UART
**** DONE why do letters transponse?
DEADLINE: <2015-03-31 Tue>
This only happens in =test-lab4= and not =test-shell=. What is different
about the two contexts? Investigating now

Ooooh, ooh oh oh that's not good -- =test-lab4= is using =hw=. I thought
we completely scrapped that -- I can't really vouch for its behavior
right now. I'll have to go in with the scalpel and do some extrication
<2015-03-31 Tue 19:33>

wait.. wait.. before I do that, =test-shell= works the same way (with
hw) and it's behaving just fine. I would expect changes to be
symmetric since =test-shell= doesn't crash anymore on invalid
commands... changes are clearly being integrated through the shared
library and I'm not seeing enough evidence to spend time thrashing =hw=
right this second. Continuing the search

god damn fucking emacs crashing all the niggers of the day
<2015-03-31 Tue 19:39>

Fixed! It just started working again. The last thing I remember doing
was removing the debugging switch (that I had just added) to system.c
and then re-scheduling the red_blinker_led in test-lab4.c. Why would
adding a thread improve the responsiveness of the uart? I have no
idea. Uart is entirely interrupt-driven and should not really be
affected by the userland tasks.

**** DONE why are letters dropping?
This only happened with my board (the one hershal was using in ECJ);
when I came home the other board began working immediately. Sounds
like a good thing I didn't chase the imaginary dragon too far.

This is why I was asking you questions Hershal. I was seeing
incredibly nonstandard behavior and my question was "at what point do
I say enough of the bullshit?" Looks like I called it on you first -- but
it fixed both of my problems.

** implementations
*** TODO graphing
As far as I can tell, at some point to really wow Nagaraja we'll need
a better graphing library. I feel I can tackle this without any input
from Hershal, so I'm going to go for it right now. Hopefully he's
working on something directly related to the lab checkout -- I never
really saw pictures, words or any other references mentioning the
quality of our graphing library, but since Nagaraja's verbal
directions were to make it look good " like -- come on, the other
teams are looking -- like -- " so -- like -- do something guys

something is happening now -- after one last check that EVERYTHING was
committed as I just solved the last (uart) problem :: Yep! all
committed. proceeding
<2015-03-31 Tue 19:54>

before real graphing can begin -- we need to stop mutating
adc_freq_data. I'm not sure why all this code is duplicated, named
with horrific tmp variables, and so tightly ingrained in the nitty
gritty of the syntax.. this is going to be a bitch to unwind.

<2015-03-31 Tue 20:27>
god damn this graphing stuff is really ingrained in there. progress is
backwards and forwards. I'm not really getting much closer to having a
graph library that can display arbitrary graphs on arbitrary windows.

Is that really the end goal?
No.. no.. I think that's what Nagaraja wants but I don't think that's
what the lab manual dictates. I feel comfortable I can argue this with
the course administration because this effort is not expended in the
direction of the classes goals. The doc literally says "Feel free to
create any test you think is appropriate" -- this is NOT graphing as
it is the MOST inefficient way to convert time to debugging data
visualized. We can do faster with an emacs macro grabbing from gdb and
smashing into an octave script. Hey, now that I mention that....

<2015-03-31 Tue 20:30>

So what to work on next? What I can tell from the lab docs, they
really want to see our filtering. Hershal is taking the analog
filtering in the lab, hopefully with this sane board I can tackle
digital filtering here. So, filtering.. do I need a signal analzer?
Nope, we have adc sim. Okay, so re-sim adc.

Done.

All right
Now find input that is going in to your filter function. Figure out
what it looks like. Figure out what filtered data should look
like. Compare, adjust until filtered in == expected out.

When I was in the lab with Hershal I detected a hardfault as soon as I
tried displaying filtered data. Let's see if that hardfault persists:

Holy fuck hardfault on the schedule of the adc_sim
thread. Investigating -- specifically, the os_reset_thread_stack of
os_add_thread...

Okay, <2015-03-31 Tue 20:54> I enlarged SCHEDULER_MAX_THREADS from 5
to 8 and we seem to be in the clear. However, now the adc seems fucked
up again -- I have no clue how to keep that sucka stable. Oh! red
blinker was disabled again. That was what inspired the jitter last
time -- enabling and testing --yay! it works. Okay, sweet fuckin
tartar sauce.

moving on to testing the filtering. Breaking to inspect
inputs. Hmm... plot_filt did not step into the filtered data. Ensuring
sampling is occuring -- well, adc_freq_data is populated. That seems
like good news to me. But! ADC_DATA_IDX does not ever increment
from 0. Is that being used in the code or is it a refactoring
artifact? Checking. Aha -- as I thought. It's never used. Commenting

so, plot_mode is set correctly.. went ahead and converted that to an
enum.. Okay, so I had to enable the filter thread but now everything
is looking green. Proceeding to monitor IO...

LEAVING OFF: I am unable to determine why the meat of filter, and the convolution
function are ever getting called

RESUME: I guess solve that in the absence of new information from hershal
