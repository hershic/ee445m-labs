#!/usr/bin/env bash
#
## \file
## \author Eric Crosson <eric.s.crosson@utexas.edu>
## \brief Wrap OpenOCD for communication with the cortex M4 used in ee445m.
## \copyright WTFPLv2
## \version 1.0
#
#########
# License:
#
#             DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
#                    Version 2, December 2004
#
# Copyright (C) 2015 Eric Crosson
#
# Everyone is permitted to copy and distribute verbatim or modified
# copies of this license document, and changing it is allowed as long
# as the name is changed.
#
#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
#
#  0. You just DO WHAT THE FUCK YOU WANT TO.
#
#########
#
## \details
## \par Script abstract
##
## This script acts as a wrapper to use OpenOCD for communication with
## the cortex M4 used in ee445m.
##
## \par Usage
## \param help Display the help screen
## \param dry-run Don't attempt to execute anything
## \param program Program the M4
## \param debug Open GDB for debugging on the M4
#
## \addtogroup OpenOCD OpenOCD invocation wrapper

# stderr is redirected to stdout for cooperation with acoc
exec 2>&1

# Execute getopt
ARGS=$(getopt -o p:dt::nh -l "program:,debug,timeout::,dry-run,help" -n "$0" -- "$@");

# Fail on bad arguments
if [ $? -ne 0 ]; then
    exit 1
fi

eval set -- "${ARGS}";

## @var HELP_OCD
## @brief Contains script invocation information
## @details Contains script invocation information and abstract.
## @ingroup OpenOCD
declare HELP_OCD
HELP_OCD=$(cat <<'EOF'
$0 : Wrap OpenOCD for communication with the cortex M4 used in ee445m.

Usage : [-n] [-p binary|-d] <-t <timeout>>

  -h : print this help menu
  -n : dry-run -- don't execute anything
  -t : number of seconds to delay instead of 3 OR
       without an argument, let openocd complete on its own
  -p : program the M4 with binary
  -d : debug

EOF
)

## @fn ocd_ctrl_c
## @brief For internal use only.
## @details Allows the user to quit regardless of number of current
## attempts
ocd_ctrl_c() {
    exit 1
}
trap ocd_ctrl_c INT

# Determine the context in which OpenOCD will be invoked: su or echo
## @var ocd_execute
## @brief For internal use only.
## @details Controls the executing context of the openocd command.
## @ingroup OpenOCD
declare ocd_execute=sudo

# acoc="/home/eric/.gem/ruby/2.2.0/bin/acoc"
# Determine the context in which OpenOCD will be invoked: su or echo
## @var ocd_openocd
## @brief For internal use only.
## @details Invocation of openocd command
## @ingroup OpenOCD
declare -r ocd_openocd="openocd"

## @var ocd_interface_prefixes
## @brief For internal use only.
## @details Users paths to OpenOCD interfaces.
## @ingroup OpenOCD
declare -A ocd_interface_prefixes
ocd_interface_prefixes=([eric]=/usr/share [hershal]=/opt/local/share)

## @var ocd_interface
## @brief For internal use only.
## @details Path to OpenOCD interface for use on this system.
## @ingroup OpenOCD
declare ocd_interface=${ocd_interface_prefixes[$(whoami)]}/openocd/scripts/board/ek-lm4f120xl.cfg

## @var openocd_target_binary
## @brief For internal use only.
## @details Target binary to flash to M4.
## @ingroup OpenOCD
declare openocd_target_binary

## @var openocd_args_program
## @brief For internal use only.
## @details Openocd command to program the M4.
## @ingroup OpenOCD
declare openocd_args_program

## @var openocd_gdb_port
## @brief For internal use only.
## @details Port to communicate to gdb with.
## @ingroup OpenOCD
declare -ri openocd_gdb_port=3333

## @var openocd_args_debug
## @brief For internal use only.
## @details Openocd command to open gdb on the M4.
## @ingroup OpenOCD
declare -r openocd_args_debug="gdb_port ${openocd_gdb_port}"

## @var openocd_timeout
## @brief For internal use only.
## @details Openocd command to open gdb on the M4.
## @ingroup OpenOCD
declare openocd_timeout="timeout 3"


# TODO: document
# TODO: kill after three seconds of no activity
retry() {
    local n=0
    local try=$1
    shift

    until [[ $n -ge $try ]]; do
        "$@" && break || {
		((n++))
	    }
    done
}

## @fn openocd_program()
## @brief Program the M4
## @retval 0 if success
## @ingroup OpenOCD
openocd_program() {

    retry 10 ${ocd_timeout} ${ocd_execute} ${ocd_openocd} --file "${ocd_interface}" -c "${openocd_args_program}" 2>&1
}

## @fn openocd_debug()
## @brief Open GDB on the M4
## @retval 0 if success
## @ingroup OpenOCD
openocd_debug() {

    retry 10 ${ocd_timeout} ${ocd_execute} ${ocd_openocd} --file "${ocd_interface}" -c "${openocd_args_debug}" 2>&1
}

# Obey command line arguments
while true; do
    case "$1" in

	-p|--program)
	    shift
	    openocd_target_binary="$1"
	    openocd_args_program="program ${openocd_target_binary} verify reset"
	    openocd_program
	    ;;

	-d|--debug)
	    openocd_debug
	    ;;

	-t|--timeout)
            case "$2" in
                "") openocd_timeout="" ;;
                *)  openocd_timeout="timeout $2"
		    shift
		    ;;
            esac
	    ;;

	-n|--dry_run)
	    # Transform the context in which openocd is invoked
	    ocd_execute=echo
	    ;;

	-h|--help)
	    echo -e "${HELP_OCD}"
	    exit
	    ;;

	--)
	    shift
	    break ;;
    esac
    shift
done
