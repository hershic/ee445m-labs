#+startup: all
#+todo: TODO(t) VERIFY(v) IN-PROGRESS(p) DOCUMENT(m) PRINT(r) | OPTIONAL(o) HIATUS(h) DONE(d) CANCELED(c)
* [2/3] global
** OPTIONAL code review
[[http://www.vogella.com/tutorials/Gerrit/article.html][Gerrit code review - Tutorial]]
** OPTIONAL continuous integration
jenkins, travis
** TODO gcc flags
- covered by -Wall
  - pedantic-error
  - Wformat-security
  - Wformat-nonliteral
  - Wmissing-include-dirs
  - Wreturn-type
  - Wparenthesis
  - Wswitch
  - Wswitch-default
  - Wswitch-enum
  - Wunused_parameter
  - Wuninitialized
  - Wunknown_pragmas
- Werror
- Wfloat-equal
- Wdeclaration-after-statement
- Wundef
- Wno-endif-labels
- Wshadow
- Wcast-qual
- Wsign-compare
- Wpacked
- Winline

* [5/19] lib
"In a real time system there is no point in finishing your task before
the deadline." -- Gerstlauer
** [1/2] heart
*** DONE modalize
- [X] determine the thread_id from os_running_threads' tcb
- [X] lookup in your memory structures what muscle he is using
- [ ] determine how to change modes without re-initting
*** IN-PROGRESS implement bind to wrap a fn pointer
call sequence:
- [X] beat()
- [X] ptr()
- [X] toggle()
- [ ] return prt()'s ret value
  ooh, this one's tricky

** [0/2] hardware
*** IN-PROGRESS bi directional notifications
look at ASSERT (ti libs)
*** TODO prevent nonexistent hardware access
[[file:~/workspace/ee445m-labs/lib/libhw/hardware.c::hw_channel*%20_hw_get_channel(HW_TYPE%20type,%20hw_metadata%20metadata)%20{][for example]], hardware.c treats all peripherals as devices containing
the same number of channels. We should have some sort of bounds
checking, even in debug-mode (compile and run the robot through the
maze with extra checks to look for failures, then switch a compile
time flag and run in release mode with minimal checks (due to the
veritability of the code) and mucho speed)
*** TODO check to see if a signal is connected before attempting a disconnect
A successful check could be a bounds check in the while condition to
test for out of bounds indexing. I suggest turning this into a compile
time flag (danger_zone? another one) that can be disabled for extra
speed boosts (keep it as a trick up your sleve until contest day) when
performance is demanded.
[[file:~/workspace/ee445m-labs/lib/libhw/hardware.c::void%20hw_unsubscribe(HW_TYPE%20type,][original todo location]]
#+BEGIN_SRC c
  /* Note: there is no check to see if a signal is even connected before
   ,* a disconnect is attempted. This would be great to add but it's not
   ,* the time right now. Comment created Saturday February 7, 2015 15:46
   ,* OPTIONAL because: consider the need 4 speed
   */
#+END_SRC
** [4/8] button
- [ ] modalize
- [X] refactor
- [ ] create .dox file
- [X] button ISR in rtos/generate-interrupts
  doesn't apply since it's a single isr for now
- [2/4] create API
  - [X] init
  - [X] interrupt control
  - [ ] read value
  - [ ] debounce
** [0/1] SysTick
*** TODO Initialization macro
convert this code into a single call that is readable, i.e. you can
immediately tell to what frequency/period the SysTick will interrupt.
#+BEGIN_SRC c :tangle no
  SysTickPeriodSet(SysCtlClockGet() / 10);
  SysTickEnable();
  SysTickIntEnable();
#+END_SRC
** [2/5] OS
*** TODO Thread addition macro
Create a macro to map over supplied threads and do this sort of
initialization. The only next step is os_launch, which should still be
called separately (comment created <2015-02-17 Tue>).
#+BEGIN_SRC c :tangle no
  IntMasterDisable();
  os_threading_init();
  os_add_thread(Thread1);
  os_add_thread(Thread2);
  os_add_thread(Thread3);
#+END_SRC
*** DONE Convert to libut/utlist
*** DONE fn to get tcb from thread's starting point
#+BEGIN_SRC c :tangle no
  void idle();
  os_add_thread(idle);
  os_get_tcb(idle); // returns the tcb containing idle
#+END_SRC
*** TODO define os_surrender_execution
*** TODO Create semaphore.dox
*** [0/2] define schedulers
See Rate Monotonic Scheduling for inspiration
- [ ] round-robin
- [ ] at least one other
** [1/1] Nexus
*** DONE interruptless-blocks
a lisp/ruby-style object to accept a block and ensure no interrupts
fire while it is executing (makes it atomic, wraps with Critical
sections, something of the sort)
** [0/1] Jitter
*** TODO create library
** [0/5] Debugging and total authoritarianism enforcement
*** TODO Check on changed immutables?
*** TODO create automated testing framework
urged by lecture <2015-02-17 Tue>
- place a magic packet in memory at the end of your stack, check for
  changed contents

esc read on <2015-02-23 Mon>:
"Do you have in mind a correctness criterion that can be expressed as
a property you can formalize? Or is your notion of correctness simply
the absence of 'bugs.'"
- how do you verify the os? hypervise that shit
  get another meta level in there, run functions and compare output
  that should be expected from the test
*** TODO create stack watcher
die on attempted overflow
*** TODO reposition the memory
don't shoot yourself in the foot with a lodaed stac
(insert picture here)
*** TODO path expressions
urged by lecture <2015-02-17 Tue>
[[http://en.wikipedia.org/wiki/Eiffel_(programming_language)][Eiffel (programming language)]]
[[./img/path_expressions_lec04.png]]
- specify and enforce correct calling order
- represented as a graph
  choose one of the following representations based on sparseness of
  the data structures:
  - adjacency list
  - adjacency matrix
** [0/1] Doxygen
*** TODO add everythig to a group! it's all we have sans c++ inheritance.
- doxygen groups like TIs libs
*** [0/3] document preprocessor directives
[[http://www.stack.nl/~dimitri/doxygen/manual/preprocessing.html][Doxygen Manual: Preprocessing]]
- [ ] PROFILING_DISABLE
- [ ] HEARTBEAT_OBEY_PROFILING
- [ ] HEARTBEAT_MODAL
** [1/1] framebuffer
*** OPTIONAL create flag to enable per-pixel-manipulation
compile time flag?
* [2/6] bin
** [1/3] Doxygen
*** [0/2] highlight special words
- [ ] immutable
- [ ] atomic
*** [2/2] publish
- [X] visible on external host
http://hershic.github.io/ee445m-labs/
- [X] link github to the online documentation
*** DONE link all doxygen projects together to show on one page
*** IN-PROGRESS script to update all doxygen files at once
- I have a hankering to refactor all Doxyfiles into a specific dir
- bash doxygenizing broke!
*** TODO Allow here docs in declare -r statements
I found a link with possibile insight. It's in one of my compter's
stack (bookmarks dir- chrome)
** [0/2] interrupt generator
*** TODO move templates into a c src dir
*** TODO integrate template population/insertion to build process
** [1/1] rtos-dev-mode
*** DONE auto-insert template for c
and hook auto-insert-mode from rtos-dev-mode-hook
* [1/3] dev environment
** TODO openocd
*** kill process on output "Info : dropped 'gdb' connection"
** [0/1] setenv
*** TODO Clean exit when invoked twice
currently prints help and exits (seemingly ambiguously)
** [3/4] emacs
*** DONE eldoc for our functions
#+BEGIN_SRC emacs-lisp :tangle no
  (load "c-eldoc")
  (add-hook 'c-mode-hook 'c-turn-on-eldoc-mode)
#+END_SRC
*** DONE disaster for arm
*** TODO Doxymacs
[[http://doxymacs.sourceforge.net/]]
*** OPTIONAL rtos-dev-mode.el
**** [5/5] gdb helper
within emacs, an O(1) way to
- [X] flash
- [X] reload
- [X] target
- [X] continue
- [X] ocd -d
**** [3/4] rtos dev environment mode
- [X] disaster-arm
- [X] gdb helper
- [X] c-eldoc
- [ ] pseudo-reserved word highlighting
** DONE cmd to open screen on the M4
** TODO Add -Wpedantic
There have been multiple issues where gcc doesn't check my code,
instilling false confidence in what is actually running.
