#+startup: sections
#+options: H:1 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:nil LaTeX:t
#+todo: TODO(t) VERIFY(v) IN-PROGRESS(p) BLOCKED(r) | OPTIONAL(o) HIATUS(h) DONE(d) CANCELED(c)
#+author: Hershal Bhave
#+author: Eric Crosson
* [12/12] Lab 1
** [3/3] lcd driver
*** DONE contains logically separate displays
     use a horizontal split
*** DONE 4+ lines per display
*** DONE API to write to displays individually
** [3/3] adc driver
*** DONE samples from 100 - 10,000 Hz
*** DONE samples from ADC0 - ADC11
*** DONE have 1 to 1 abilities as this api
    #+BEGIN_SRC c
      unsigned short ADC_In(void);
      int ADC_Open(unsigned int channelNum);
      int ADC_Collect(unsigned int channelNum, unsigned int fs,
                      unsigned short buffer[], unsigned int numberOfSamples);
    #+END_SRC
** [5/5] interpreter
*** DONE uart port
*** DONE interrupts
*** OPTIONAL hardware fifo
*** DONE software fifo x2
*** DONE the below mojo
  Use the stdio library and remap the serial stream to the UART. See the
  =retarget.c= file in the =Keil\ARM\Boards\Keil\MCBSTM32\Blinky= project
  included in the Keil installation. In particular, you need to create a
  fputc function like this:
  #+BEGIN_SRC c
    int fputc(int ch, FILE *f){
      UART0_OutChar(ch);
      return (1);
    }
    int fgetc (FILE *f){
      return (UART0_InChar());
    }
    int ferror(FILE *f){
    /* Your implementation of ferror */
      return EOF;
    }
  #+END_SRC
** DONE Checkout
- demonstrate measuring of timer2 ISR overhead
- be prepared to field questions addressing interrupts/FIFOs
- demonstrate each interpreter command
- show screen displaying two stuffs
* [1/2] Lab 2
** DONE [6/6] Part 1
Demonstrate each of the following
*** DONE Testmain1
- needs cooperative thread scheduler without interrupts

  Meaning: create method =OS_Suspend= that, when called, transfers
  control from the current thread to the next waiting thread.

  This will be the sole method of thread switching in this program.

  #+NAME: Testmain1
  #+CAPTION: Test system for cooperative thread switching
  #+BEGIN_SRC c :tangle no
    unsigned long Count1; // number of times thread1 loops
    unsigned long Count2; // number of times thread2 loops
    unsigned long Count3; // number of times thread3 loops
    void Thread1(void){
      Count1 = 0;
      for(;;){
        PE0 ^= 0x01;      // heartbeat
        Count1++;
        OS_Suspend();     // cooperative multitasking
      }
    }
    void Thread2(void){
      Count2 = 0;
      for(;;){
        PE1 ^= 0x02;      // heartbeat
        Count2++;
        OS_Suspend();     // cooperative multitasking
      }
    }
    void Thread3(void){
      Count3 = 0;
      for(;;){
        // PE2 ^= 0x04;      // heartbeat
        PE3 ^= 0x08;      // heartbeat
        Count3++;
        OS_Suspend();     // cooperative multitasking
      }
    }
    int main(void){
      OS_Init();    // initialize, disable interrupts
      PortE_Init(); // profile user threads
      NumCreated = 0 ;
      NumCreated += OS_AddThread(&Thread1,128,1);
      NumCreated += OS_AddThread(&Thread2,128,2);
      NumCreated += OS_AddThread(&Thread3,128,3);
      // Count1 = Count2 = Count3 (or off by one) at all times
      OS_Launch(TIME_2MS); // doesn't return, interrupts enabled in here
      return 0;            // this never executes
    }
 #+END_SRC
*** DONE Testmain2
- preemptive thread scheduler with SysTick interrupts

  SysTick suspends the running thread and begins the next active
  thread in the list with a round robin fashion.

  #+NAME: Testmain2
  #+CAPTION: Test system for preemptive thread switching
  #+BEGIN_SRC c :tangle no
    void Thread1b(void){
      Count1 = 0;
      for(;;){
        PE0 ^= 0x01;    // heartbeat
        Count1++;
      }
    }
    void Thread2b(void){
      Count2 = 0;
      for(;;){
        PE1 ^= 0x02;    // heartbeat
        Count2++;
      }
    }
    void Thread3b(void){
      Count3 = 0;
      for(;;){
        PE2 ^= 0x04;    // heartbeat
        Count3++;
      }
    }
    int Testmain2(void){
      OS_Init();    // initialize, disable interrupts
      PortE_Init(); // profile user threads
      NumCreated = 0 ;
      NumCreated += OS_AddThread(&Thread1b,128,1);
      NumCreated += OS_AddThread(&Thread2b,128,2);
      NumCreated += OS_AddThread(&Thread3b,128,3);
      // Count1 = Count2 = Count3 on average
      // Notice: counts are larger than testmain1. Why is this?
      OS_Launch(TIME_2MS); // doesn't return, interrupts enabled in here
      return 0;            // this never executes
    }
  #+END_SRC
*** DONE Testmain7
I don't think a description of this main program was included in
the lab manual.

*** DONE OS_Launch
*** DONE Context switching
**** init
1. Give =PendSV= handler lowest priority
**** action
1. SysTick interrupt fires
   1. prepare for context switching
   2. pend the =PendSV= exception
      [[./img/pendsv_context_switch.png]]
2. Enter =PendSV=
   1. do context switch
      The exception sequence (that landed you in the =PendSV= handler)
      has saved R0-R3, R12, LR, PC, xPSR. Thus, =PendSV= is only
      responsible for storing R4-R11 to the process stack.
*** DONE Checkout
<2015-02-16 Mon 10:30>
** TODO [1/3] Part 2
Your job is to design, implement and test operating system commands
that implement a multiple thread environment.

Note: The word task in this lab is not a formal term, rather a general
description of an overall function implemented with a combination of
hardware, background threads (ISR), and foreground threads (main
programs).
*** DONE [2/2] profiling compile-time flag
- [X] compiles minimally intrusive pin-toggling code to
identify when and what tcb is running
- [X] measure PIDWork with and without the profiling code
*** TODO [0/2] guarantee UART never loses data
- [ ] stress test :: Hammer it and increase the capacity until no chars
                 are dropped from libuart or libshell
- [ ] profile ::  Create a table like Table 2.1 in [[./Lab02.pdf]]
*** TODO make callback to task scheduler explicit
*** [4/4] Checkout
- [X] Run the software system and explain the profiling data to the TA
- [X] Discuss the sketches you created as part of prep & procedure
- [X] Discuss the TCB before and after a thread switch
- [X] Identify inefficiencies in your implementation
*** [3/3] Deliverables
- 20 points :: report
- 10 points :: software quality

- [X] objectives :: 1/2 page max
- [X] hardware design :: none
- [X] software design :: spinlock/round-robin switching source
- [6/6] measurement data :: graphs and tables of data
  - [X] plots of the logic analyzer
     see Figures 2.1, 2.2, 2.3, 2.4, and 2.8
  - [X] measurement of the thread-switch time
  - [X] plot of the logic analyzer running spinlock/round-robin
  - [X] the four sketches with measured data collected during testing
     from first preparation parts 3 and 5
  - [X] a table each showing performance measurements versus sizes of
     OS_Fifo and timeslices
     like Table 2.1
  - [X] table showing performance measurements with/without debugging instruments
- [7/7] analysis and discussion :: 2 page maximum
  - [X] Why did the time jitter in my solution jump from 4 to 6 Î¼s when
     interpreter I/O occurred?
  - [X] Justify why Task 3 has no time jitter on its ADC sampling.
  - [X] There are four (or more) interrupts in this system DAS, ADC,
     Select, and SysTick (thread switch).
     Justify your choice of hardware priorities in the NVIC?
  - [X] Explain what happens if your stack size is too small.
     How could you detect stack overflow? How could you prevent stack overflow from crashing the OS?
  - [X] Both Consumer and Display have an OS_Kill() at the end. Do these
     OS_Kills always execute, sometime execute, or never execute?
     Explain.
  - [X] The interaction between the producer and consumer is
     deterministic. What does deterministic mean?
    - Assume for this question that if the OS_Fifo has 5 elements data
    is lost, but if it has 6 elements no data is lost.
    - What does this tell you about the timing of the consumer plus display?
  - [X] Without going back and actually measuring it, do you think the
     Consumer ever waits when it calls OS_MailBox_Send?
     Explain.
* [1/1] Lab 3
** DONE [4/4] Preparation
*** DONE Add libjitter
**** DONE Add profiling functionality to os
PendSV needs to record the SysTick before and after thread switch to
determine the amount of thread-time jitter. Maybe have each thread
record these jitter values? Not sure how to library-ize this...
**** Valvano
Add features to the OS to measure and record time jitters for the two
periodic threads. Record two maximum jitters and two histograms of
jitter values. In particular, move the jitter measurements from Lab2
into the OS, and make two copies of it. Feel free to change any of the
user code in Lab2.c so they are compatible with your RTOS.
**** Decrypted
Add libjitter, which just keeps a running average and/or buffer of
pidwork values. Research SV (System Service Call).
*** DONE [4/4] Aperiodic background thread triggered on button press
**** DONE Create priority threads
**** DONE Create single-shot threads
**** DONE Button Detection
**** DONE Button Debouncing
**** Valvano
Write C code to implement the second aperiodic background thread,
triggered by a falling edge on PF0. In hardware this is implemented
with the SW2 button. On the robot, you could add a bumper switch and
use this feature to detect collisions. Your OS should allow the user
to activate and arm this feature by passing a user function to
execute, and using the external event mechanism to trigger the
background task. You should also provide an OS function to disarm this
feature. The priority parameters for OS_AddPeriodicThread
OS_AddSW1Task and OS_AddSW2Task allow the user to specify the relative
priority of the four background threads.
**** Decrypted
Basically, get libhw working and make libbutton generalized to work on
any gpio (it's almost there).
*** CANCELED Implement a counting semaphore
**** Valvano
Consider at least two ways to implement blocking semaphores. In this
class, we have 1 to 10 foreground threads.  How would your
implementation be different if there were 100 foreground threads?
Write C code to implement the blocking semaphores. Take one of the
test programs from Lab2.c and modify it to test the blocking
semaphores. In particular, there should be multiple threads signaling
the same semaphore, and multiple threads waiting on that same
semaphore. You should signal both in the background and in the
foreground, but you can only wait in the foreground. Use counters to
make verify the total number of times signal is called matches the
total number of times wait allows a thread to pass. The key is to run
the system in an exhaustive manner increasing the likelihood of
finding bugs. For example, if there is a 1 in 10 4 chance of Condition
A occurring (e.g., PC is executing at a particular spot) and a 1 in 10
4 chance of Condition B occurring, there will be a 1 in 10 8 chance of
Conditions A and B occurring at the same time. You also have to be
careful not to introduce critical sections in the test program itself.
Edit Lab2.c so it is compatible with your RTOS. Modify the numbers in
Signal2() so that the period of this thread is variable.
**** Decrypted
Make a counting semaphore.
*** DONE Consider how to implement a priority scheduler
**** Valvano
Consider at least two ways to implement the priority scheduler. Again,
think about how would your implementation be different if there were
100 foreground threads? Write C code to implement the priority
scheduler.
**** Decrypted
Think about how to implement a priority scheduler. Then implement it.
** Lab Session Notes
- adc sampling at 2 khz
  follow the figure 2.4
- another thread for the serial
- a thread to update the lcd with adc data
- jitter: defined as time past 2khz goal

- task: display threadcount to lcd, watch it increase with button-created threads
- fft to smash the cpu and increase jitter
- task 4/5: from starter code. also to smash cpu for jitter
* [2/2] Lab 4
** DONE [3/3] preparation
*** DONE analog interface design/low-pass filter                  :hershal:
- update <2015-03-18 Wed>:
  - LAB CLOSED until <2015-03-23 Mon>
- use either excel or filterpro (probably filterpro will be easier,
  windows-only), to design an analog low-pass filter
  - 1kHz analog filter:
    - 2x TI TLC2272ACP :: rail-to-fail dual op-amp
    - 2x 10 nF Capacitor
    - 12.4 kOhm Resistor
    - 16.8 kOhm Resistor
    - 12 nF Capacitor
    - 4.220 kOhm Resistor
    - 7.870 kOhm Resistor
    - 68 nF Capacitor
*** DONE real time data acquisition                               :hershal:
**** DONE use the adc to sample data from the ir sensor          :hershal:
**** DONE [4/4] add interpreter commands:                           :eric:
***** DONE enable/disable sampling
***** DONE enable/disable filtering
***** DONE print out the raw adc data
***** CANCELED print out the filtered adc data
*** DONE design a FIR filter
- design a digial FIR filter to condition the signal
**** chat with Priscilla
- look up matlab command =freqz=
- look at lecture 5, talks about FIR in detail
  - [[http://users.ece.utexas.edu/~bevans/courses/realtime/lectures/05_FIR_Filters/index.html]]
- look at hw2
- look at slides from lab3
** DONE [2/2] plot the data on the lcd
**** DONE [2/2] plot:
***** DONE voltage vs. time
***** CANCELED voltage vs. frequency
**** CANCELED plots modes switchable by interpreter commands        :eric:
* [0/3] Lab 5
** TODO [3/10] add new shell commands
*** TODO format
*** DONE mount
*** TODO ls [dir]
*** DONE cat [file]
*** TODO rm [file]
*** TODO touch
*** TODO echo
*** TODO rm
*** TODO mkdir
*** DONE pwd
** TODO [0/5] task 1 :: stream debugging data to sdcard
- [ ] create a new file
- [ ] redirect stdio to a file instead of the serial port
see fputc
- [ ] printf to a file
- [ ] redirect stdio back to the serial port
- [ ] close the file
* [0/10] Lab 6
- [ ] test the CAN physical layer of the network
  Standard CAN 2.0A
- [0/6] debug sensor interfaces
  - [ ] motor
    Measure the current and voltage delivered to the motor under
    no-load conditions.
  - [ ] ping sensor
    Must measure distances accurately at 10 Hz. Measure
    - [ ] max deviation
    - [ ] average
    - [ ] std deviation
    on the 10 samples
  - [ ] IR sensor
- [ ] measure maximum sustained bandwidth of the system
  what factors limit bandwidth?
- [ ] put all pieces together in modified lab4 so data measured in
  each node is available in both computers
* [0/7] Lab 7
** Race rules
1. 60 seconds to set up robot
   - must touch the starting line
2. TA yells go
   - /false start/ when a robot fails to start
     two /false starts/ constitutes a disqualifications
3. Race lasts 180 seconds
   - robots must stop all movement after this time
     robots that continue to move after 180 seconds are deducted two
     points
   - unintelligent robots will be disqualified
   - no pieces may be dropped by your robot
     - TAs will remove unintentionally dropped refuse
*** Team mechanic
- one member of the team will be designated as the mechanic
- mechanic permitted to make *up to 3* repairs during the race
- robots requiring a fourth repair it will be disqualified
**** Examples of repairs
- reorienting the robot
- moving a robot because it's stuck
- reconnecting a loose wire
- fixing a mechanical malfunction
- resetting the software
**** Rules of repairs
- repairs may not impede other robots
- all repairs incur a minimum of 15 seconds penalty
  - a team member shall count down 15 seconds out loud during the
    repair (are you kidding me)
- after repair: robot must be placed back on the track /behind/ where it
  was picked up and not within 2 feet of another robot
*** Scoring
$P = M + S$
| Variable | Meaning                                              |
|----------+------------------------------------------------------|
| $P$      | Score                                                |
| $M$      | Milestones passed                                    |
| $S$      | Bool: robot stops moving after precisely 180 seconds |

**** Achieving a milestone
- any part of your Frisbee disk must cross the milestone line
- only one milestone may be acheived per lap
*** Disqualified robots
- disqualified robots will be removed from the track and placed in a
  position of shame
- disqualified robots get credit and penalties according to the
  scoring criteria up to the point of disqualification
*** Strategy
- move quickly and accurately around the track
- be a good sport
*** Bonus points
**** Pre-Qualifying round
To qualify for the 20 point grade bonus, check out on or before <2015-04-28 Tue>.
- demonstrate to any TA
- on or before <2015-04-30 Thu>
- to reach qualifying round
  - positive score
  - at least two milestones
***** Pre-qualifying rules
- one robot on the track at a time
- first come first served basis
***** Qualifying rules
<2015-05-05 Tue>
- robots race twice
- TA decides race order
- ECJ outdoor plaza
- scores used for seeding into finals
- scores used for finals tie breakers
- can qualify for finals after the pre-qualifying round
  - incurs grade penalty
  - lower seeding score
***** Final competition
<2015-05-07 Thu>
- during class
- ECJ plaza
- direction determined by coin flip at start of each race
- can run test runs between 15:00 and 18:00
- charge batteries for 8 hours prior to race
- after every able robots races three times
  - places 4-7 race for a winner
  - places 1-3 race for a winner
  - ultimate ties broken by additional race-offs
*** The robot
- choose a name for your robot
  - limit to 20 chars including spaces (lol)
- use materials from robot kit
- do not cut the circumference of the Frisbee
- input devices
  - four IR sensors
  - four tactile touch sensors
  - four ultrasonic ranging sensors
- output devices
  - one servo
  - four geeared DC motors
  - two high-RPM low-torque DC motors
  - two stepper motors
  - one solenoid
- must fit in /bounding box/
  - defined as 3D cylinder with 80-degree angles that should contain all hard
    components of your robot
  - /footprint/ is defined as floor of its /bounding box/
    - /footprint/ must equal a standard circular Frisbee at all times
      during the competition
    - soft components (rubber bands, string, piano wire) may extend 2
      inches beyond the footprint.
      - minimize the chance of tangling with other robots
      - tangled robots reqult in double disqualification
  - max height of /bounding box/ is 12 inches at all times during the competition
- wheels on the ground at all times
- cannot go over walls
** Three laws of robotics
1. A robot may not harm a human being, or, through inaction, allow a
   human being to come to harm.
2. A robot must obey the orders given to it by TA-referees.
3. A robot must protect its own existence and the existence of the
   other robots, as long as such protection does not conflict with the
   First or Second Law.
** Judges Rules
- The instructor is the judge.
- Contestants should ask the judge about possible designs or
  strategies that may be questionable under any of the rules.
- Contest rules and procedures, or even the game, may have to be
  altered during the semester. As much notice as possible will be given.
- The judge may alter or eliminate any rule, or add rules, at any
  time.
- The TA-referees will decide any discrepancies in the contest play.
- All decisions of the TA-referees are final.
** Robot structure restrictions
- no additional
  - batteries
  - servos
  - solenoids
  - motors
Besides the above,
- everything powered from the one 8.4V bettery is allowed
- teams may possess only one battery at a time
- no DC-DC converters to gain voltage
- humans may not pre-load potential energy into the 'bot before racing
- no tape
- discard rubber bands before returning kit
** 50$ rule
- don't exceed 50 dollars before shipping and handling when purchasing
add-ons for your robot
- must be available to all teams at that price/delay
- robot name, description, cost, source must be first approved by a
  TA, titled /The 50$ Rule/
- items logged within 5 days of purchase
- purchased/unused items do not count towards yoru limit
- receipt must be shown to TA (with date and cost
** [0/1] Preparation
DEADLINE: <2015-05-15 Fri>
*** TODO Submit the following
- robot name
- first, last name of all team members
- home phone numbers of all teams (?)
- email addresses of all teams
- select two time/week for an official team project meeting (sans TA)
- list regularly scheduled lab hours that all team members can meet
  with a TA
  The TA will select one of these hours to be when your preparation
  and demonstrations will be due
** [0/6] Procedure
DEADLINE: <2015-04-22 Wed>
Note: Don't be a dingus when it comes to debugging
*** TODO Design and build the mechanical aspects of the robot
- Be able to
  - move
  - turn
  - carry electronics
- Sketch mechanical form of robot detailing
    - moving
    - turning
    - carrying
    - sensing
*** TODO Design electronic driving interface
- define the interface connecting
  - steering and motors, to the
  - microcontroller
- snubber diodes must be used for all devices having an inductive load
*** TODO Show how the system will be powered
*** TODO Design low-level sw drivers for movement and steering motors
- robot must use some sort of controller feedback
  defined as sensor input controlling the motor output (hur-dur)
"You can control pweriod, speed, angle to wall, or distance to the
wall. If you want to control another parameter, please get approval
from your TA."
*** TODO Test movement and steering
- [ ] measure maximum speed of the robot
- determine the best way to make turns
- [ ] calculate the accuracy of the turning algorithm
  i.e. if you say "turn 90 degrees" how many degrees does the robot
  actually turn?
** TODO Deliverables
1. Objectives (not required for this 7A)
2. Hardware Design
   - Rough mechanical sketch of the robot (Procedure 1)
   - Electrical circuit diagram for the motor interfaces (Procedure 2)
   - Power supply circuitry (Procedure 3)
3. Software Design (printout of these software components)
   - Low-level device drivers for the motor interfaces (header and code files) (Procedure 4)
   - High-level test program to evaluate movement and steering (Procedure 5)
4. Measurement Data
   - Give the voltage and currents of each of the motors used (Procedure 2)
   - Give the robot speed and turning accuracy (Procedure 5)

5. Analysis and Discussion
   None
